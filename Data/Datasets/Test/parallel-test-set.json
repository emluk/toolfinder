{
    "ParGenes": {
        "Name": "ParGenes",
        "Description": "Tool for massively parallel model selection and phylogenetic tree inference on thousands of genes.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "porthomcl": {
        "Name": "PorthoMCL",
        "Description": "Parallel orthology prediction using MCL for the realm of massive genome availability.\n\nParallel implementation of OrthoMCL.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "corenup": {
        "Name": "CORENup",
        "Description": "CORENup is a deep learning model for nucleosome identification. CORENup processes a DNA sequence as input using one-hot representation and combines in a parallel fashion a fully convolutional neural network and a recurrent layer. These two parallel levels are devoted to catching both non periodic and periodic DNA string features.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "fits": {
        "Name": "FITs",
        "Description": "Forest of imputation trees for recovering true signals in single-cell open chromatin profiles.\n\nForest of Imputation Trees (FITs) is a method to impute highly sparse and noisy data-sets from single cell epigenome profiling.\n\nFITs work in two phases. It has been made so to handle very large read-count matrixes and to get better imputation. In phase-1 it builds multiple imputation trees and from every tree it extracts 1 or 2 imputed version of original read-count matrix. One can run phase-1 of FITs in parallel processing mode also, where multiple trees can be build using several processors.After phase-1, the phase-2 part of FITs is used to accumulate the most relevant imputed version for every cell.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "cuda-ec": {
        "Name": "CUDA-EC",
        "Description": "A scalable parallel algorithm for correcting sequencing errors in high-throughput short-read data so that error-free reads can be available before DNA fragment assembly.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "FQStat": {
        "Name": "FQStat",
        "Description": "A parallel architecture for very high-speed assessment of sequencing quality metrics | BACKGROUND:High throughput DNA RNA sequencing has revolutionized biological and clinical research. Sequencing is widely used, and generates very large amounts of data, mainly due to reduced cost and advanced technologies. Quickly assessing the quality of giga-to-tera base levels of sequencing data has become a routine but important task. Identification and elimination of low-quality sequence data is crucial for reliability of downstream analysis results. There is a need for a high-speed tool that uses optimized parallel programming for batch processing and simply gauges the quality of sequencing data from multiple datasets independent of any other processing steps. RESULTS:FQStat is a stand-alone, platform-independent software tool that assesses the quality of FASTQ files using parallel programming",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "MasterOfPores": {
        "Name": "MasterOfPores",
        "Description": "Parallel and scalable workflow for the analysis of Oxford Nanopore direct RNA sequencing datasets.\n\nNextflow pipeline for analysis of Nanopore reads (from RNA/cDNA/DNA).\n\nPlease read the documentation here: https://biocorecrg.github.io/master_of_pores/.\n\nNextflow pipeline for analysis of Nanopore data from direct RNA sequencing. This is a joint project between CRG bioinformatics core and Epitranscriptomics and RNA Dynamics research group.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "rqc": {
        "Name": "Rqc",
        "Description": "Optimised tool designed for quality control and assessment of high-throughput sequencing data that performs parallel processing of entire files and produces a report which contains a set of high-resolution graphics.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "rpmcmc": {
        "Name": "RPMCMC",
        "Description": "A parallel MCMC algorithm for discovering diverse motifs from large sequence sets.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "hisif": {
        "Name": "HiSIF",
        "Description": "Modeling and analysis of Hi-C data by HiSIF identifies characteristic promoter-distal loops.\n\nHiSIF - HiC Significant Interacting Fragments.\n\nHiSIF was implemented by using C++/C with parallel processing being written in C. It has been compiled and run exclusively on Linux operating systems. This tool only requires the g++ compiler and a reference genome for HG19. Standalone CERN ROOT C++ framework is used to extract fit parameters of the CTS interactions. A small C tool is provided to process the initial data from NCBI. HiSIF supports all of the available three Hi-C protocols (Hi-C, TCC and in situ Hi-C). The tool is named from the fact that it is designed to find the significant interactions from a given sample of Hi-C reads.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "spark-vs": {
        "Name": "Spark-VS",
        "Description": "Spark-based library for setting up massively parallel Structure-Based Virtual Screening (SBVS) pipelines in Spark.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "profeatx": {
        "Name": "ProFeatX",
        "Description": "A parallelized protein feature extraction suite for machine learning.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "promocell": {
        "Name": "ProMoCell",
        "Description": "ProMoCell (Protein interaction-based functional Modules of the Cell of an organism) is a network-based zoning approach that can determine the functional modules of a cell of an organism and can potentially be utilized for parallel whole-cell simulation. ProMoCell is a single-click web service and it is very simple, user-friendly and easy to use. Presumably, no other web services like ProMoCell exists till date.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "SW-Tandem": {
        "Name": "SW-Tandem",
        "Description": "Tool for large-scale peptide identification with parallel spectrum dot product on Sunway TaihuLight.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "fastme": {
        "Name": "FastME",
        "Description": "Distance algorithms to infer phylogenies. It's based on balanced minimum evolution, which is the very principle of NJ. It includes Nearest Neighbor Interchange (NNI) and also Subtree Pruning and Regrafting (SPR), while remaining as fast as NJ and providing a number of facilities: distance estimation for DNA and proteins with various models and options, bootstrapping, and parallel computations.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "veryfasttree": {
        "Name": "VeryFastTree",
        "Description": "VeryFastTree is a highly-tuned implementation of the FastTree-2 tool that takes advantage of parallelization and vectorization strategies to speed up the inference of phylogenies for huge alignments. It is important to highlight that VeryFastTree keeps unchanged the phases, methods and heuristics used by FastTree-2 to estimate the phylogenetic tree. In this way, it produces trees with the same topological accuracy than FastTree-2. In addition, unlike the parallel version of FastTree-2, VeryFastTree is deterministic.\n\nTo facilitate the adoption from the research community, VeryFastTree keeps exactly the same command line arguments than FastTree-2. In this way, it is only necessary to replace the call to FastTree-2 by a call to VeryFastTree using the same options to increase the overall performance.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "paramed": {
        "Name": "ParaMed",
        "Description": "A parallel corpus for English-Chinese translation in the biomedical domain.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "swipe": {
        "Name": "SWIPE",
        "Description": "Tool for performing rapid local alignment searches in amino acid or nucleotide sequence databases. It is a highly optimized implementation of the Smith-Waterman algoritm using SIMD parallel computing technology available on common CPUs.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "sledgehmmer": {
        "Name": "SledgeHMMER",
        "Description": "Tool for searching the Pfam database using a parallelized version of the program hmmpfam. The user can perform queries with one or more sequences at a time and then receive the results by e-mail.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "pe-assembler": {
        "Name": "PE-Assembler",
        "Description": "A simple 3' extension approach to assembling paired-end reads and capable of parallelization.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "trap-seq": {
        "Name": "TRAP-seq",
        "Description": "Massively parallel quantification of CRISPR editing in cells by TRAP-seq enables better design of Cas9, ABE, CBE gRNAs of high efficiency and accuracy.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "GeneRax": {
        "Name": "GeneRax",
        "Description": "A tool for species tree-aware maximum likelihood based gene tree inference under gene duplication, transfer, and loss | GeneRax is a parallel tool for species tree-aware maximum likelihood based gene tree inference under gene duplication, transfer, and loss",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "starbeast3": {
        "Name": "StarBeast3",
        "Description": "BEAST 2 based package for Bayesian multispecies coalescent (MSC) analyses using efficient and parallelised MCMC operators.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "PepVis": {
        "Name": "PepVis",
        "Description": "PepVis tool is a python based GUI pipeline which can be used to model and prepare large-scale peptide structure from the sequence and also to perform large-scale peptide virtual screening. PepVis integrates ModPep and Gromacs for modelling and structure optimization of the peptides, while it integrates AutoDock Vina,ZDOCK, AutoDock CrankPep(ADCP) for performing peptide virtual screening. \nThe protein-peptide complexes can be rescored using ZRANK2 and the flexible refinement of the large protein-peptide complexes can also be performed using FlexPepDock. The parallel job execution has been implemented using GNU parallel and the user can provide inputs using GUI which will produce the bash script based on the customized input provided by the user and can be run in terminal.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "methpanel": {
        "Name": "MethPanel",
        "Description": "A parallel pipeline and interactive analysis tool for multiplex bisulphite PCR sequencing to assess DNA methylation biomarker panels for disease detection.\n\nMethPanel is a computational pipeline in Linux operating system with an interactive graphical interface for rapid analysis of multiplex bisulphite PCR sequencing data. The tool covers a complete analysis workflow from genomic alignment to DNA methylation calling and supports an unlimited number of PCR amplicons and input samples. Moreover MethPanel offers important and unique features, such as a epipolymorphism score and a bisulphite PCR bias correction. MethPanel can be run in parallel by samples on either a personal computer or a high performance computer. The outputs are automatically forwarded to a shinyApp for convenient display, visualisation and sharing of data with collaborators and clinicians.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "jfuzzymachine": {
        "Name": "JFuzzyMachine",
        "Description": "A Multistaged Hyperparallel Optimization of the Fuzzy-Logic Mechanistic Model of Molecular Regulation.\n\nElucidating mechanistic relationships among intracellular macromolecules is fundamental to understanding the molecular basis of normal and diseased processes. The classical fuzzy logic approach employs varying degrees of truth to describe relationships between interacting molecules. jFuzzyMachine implements the fuzzy logic approach to elucidate mechanistic relationships among biological molecules and makes more readily available the fuzzy logic inference approach in a freely available tool.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "MARGO": {
        "Name": "MARGO",
        "Description": "MARGO (Massively Automated Real-time GUI for Object-tracking).\n\nFast object tracking in real time allows convenient tracking of very large numbers of animals and closed-loop experiments that control stimuli for many animals in parallel. We developed MARGO, a MATLAB-based, real-time animal tracking suite for custom behavioral experiments. We demonstrated that MARGO can rapidly and accurately track large numbers of animals in parallel over very long timescales, typically when spatially separated such as in multiwell plates. We incorporated control of peripheral hardware, and implemented a flexible software architecture for defining new experimental routines. These features enable closed-loop delivery of stimuli to many individuals simultaneously. We highlight MARGO's ability to coordinate tracking and hardware control with two custom behavioral assays (measuring phototaxis and optomotor response) and one optogenetic operant conditioning assay.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "neurodevsim": {
        "Name": "NeuroDevSim",
        "Description": "NeuroDevSim is a Neural Development Simulator for Linux of MacOS environments. It is a parallel and phenomenological computational framework to grow large numbers of neuronal morphologies (and resultant microcircuits) simultaneously according to growth-rules expressed in terms of interactions with the environment and internal variables:.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "parallelgwas": {
        "Name": "parallelGWAS",
        "Description": "Developing parallel computing tools for genome-wide association studies.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "mpgafold": {
        "Name": "MPGAfold",
        "Description": "Massively parallel genetic algorithm that predicts RNA secondary structure.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "rna-stability": {
        "Name": "rna-stability",
        "Description": "Parallel processing framework for large-scale generation of secondary RNA structures and folding statistics for the transcriptome of any species.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "pardre": {
        "Name": "ParDRe",
        "Description": "De novo parallel tool to remove duplicated and near-duplicated reads through the clustering of Single-End or Paired-End sequences from fasta or fastq files.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "parkvfinder": {
        "Name": "parKVFinder",
        "Description": "Parallel KVFinder (parKVFinder) is an open-source software designed for the detection and spatial characterization (shape, volume, area and surrounding residues) of any type of biomolecular cavity. parKVFinder is available alongside an easy-to-use PyMOL plugin (PyMOL2 parKVFinder Tools) with an intuitive graphical user interface that allows users to explore customizable parameters for cavity detection and characterization.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "pykvfinder": {
        "Name": "pyKVFinder",
        "Description": "Python-C Parallel KVFinder (pyKVFinder) is an efficient and integrable Python package for biomolecular cavity detection and characterization in data science. Besides conventional cavity properties such as volume and area, which are stored as Python dictionaries, pyKVFinder computes cavity depth and hydropathy. Similar to cavity points, these spatial and physicochemical properties are stored as Python ndarrays and can be visualized using Python molecular visualization widgets. In general, pyKVFinder is designed for efficient scripting routines built on easy-to-handle data structures, such as Python dictionaries and NumPy N-dimensional arrays (ndarrays), and can be building blocks for data science and drug design applications.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "parmatt": {
        "Name": "parMatt",
        "Description": "parMatt: parallel multiple alignment of protein 3D-structures with translations and twists for distributed-memory systems. parMatt is based on a popular Matt software.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": true
    },
    "parmigene": {
        "Name": "parmigene",
        "Description": "The package provides a parallel estimation of the mutual information based on entropy estimates from k-nearest neighbours distances and algorithms for the reconstruction of gene regulatory networks.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "qpms9": {
        "Name": "qPMS9",
        "Description": "Parallel exact qPMS (quorum Planted Motif Search) algorithm that offers significant runtime improvements on DNA and protein datasets.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "readscan": {
        "Name": "Readscan",
        "Description": "This is a highly scalable parallel program to identify non-host sequences (of potential pathogen origin) and estimate their genome relative abundance in high-throughput sequence datasets.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "xchemexplorer": {
        "Name": "XChemExplorer",
        "Description": "Data management and workflow tool for the parallel determination of protein-ligand structures. It was initially written to support crystallographic fragment screening at beamline I04-1 at the Diamond Light Source, but it is a generic program that can be used to facilitate any structure-based drug design project.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": true,
        "distributed": false
    },
    "yalla": {
        "Name": "yalla",
        "Description": "GPU-Powered Spheroid Models for Mesenchyme and Epithelium",
        "GPU": true,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "hpul": {
        "Name": "Hpul",
        "Description": "Usage of the Sea Urchin Hemicentrotus pulcherrimus Database, HpBase.\n\nHemicentrotus pulcherrimus Genome Resources.\n\nHemicentrotus pulcherrimus Genome and Transcriptome database.\n\nHemicentrotus pulcherrimus (A. Agassiz, 1863) (Animaria: Echinodermata: Echinoidea: Echinoida: Strongylocentrotiae: Hemicentrotus) is the most widely distributed sea urchin in Japan and important marine food resources in eastern Asia. This species has a long history as a model organism in the field of developmental and cell biology since the mid 1900s. The web site provides information on H. pulcherrimus genome and transcriptome for a wide range of biologists.\n\n||| COMMON LINK WITH (PUB. & NAME DIFFERENT) bio.tools/insdc (NIG.AC.JP), bio.tools/dfast (NIG.AC.JP), bio.tools/ddbj (NIG.AC.JP), bio.tools/cibex (NIG.AC.JP)\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'H pulcherrimus'",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "CSMD": {
        "Name": "Computation Subtraction-based Microbiome Discovery (CSMD)",
        "Description": "A computational subtraction-based microbiome discovery pipeline for species-level characterization of clinical metagenomic samples.\n\nA computational pipeline for high-resolution profiling of low abundance microbiome in clinical samples using whole genome shotgun sequencing.\n\nComputation Subtraction-based Microbiome Discovery (CSMD).\n\nCSMD will work with a series of libraries listed in Table 2, including human-related genomes or sequences (21G) and all RefSeq bacteria genomes (150G, as of November 2018). The build process will then require approximately 500GB of additional disk space and 200GB of RAM. These genomes or sequences can be found in DBPATH/hg38/SEQ, DBPATH/AHG/SEQ, DBPATH/EHG/SEQ and DBPATH/RefSeq/bacteria/SEQ, respectively. And the indexed files will be saved in DBPATH/hg38, DBPATH/AHG, DBPATH/EHG and DBPATH/RefSeq/bacteria, respectively",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "coverageview": {
        "Name": "CoverageView",
        "Description": "This package provides a framework for the visualization of genome coverage profiles. It can be used for ChIP-seq experiments, but it can be also used for genome-wide nucleosome positioning experiments or other experiment types where it is important to have a framework in order to inspect how the coverage distributed across the genome.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "curc": {
        "Name": "CURC",
        "Description": "A GPU-accelerated reference-free compressor for high-throughput sequencing reads of FASTQ files.",
        "GPU": true,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "distmap": {
        "Name": "distmap",
        "Description": "A Toolkit for Distributed Short Read Mapping on a Hadoop Cluster.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": true
    },
    "gpmeta": {
        "Name": "GPMeta",
        "Description": "GPU-accelerated method for ultrarapid pathogen identification from metagenomic sequences.",
        "GPU": true,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "ioncram": {
        "Name": "IonCRAM",
        "Description": "A reference-based compression tool for ion torrent sequence files.\n\nIonCram is the first compression tool that efficiently compresses the Ion Torrent BAM files. IonCram extends the popular CRAM program by improving the compression of the flow signals. IonCram could improve the compression of CRAM by 13% achieving an overall space saving of about 45%.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "samscope": {
        "Name": "Samscope",
        "Description": "Lightweight SAM/BAM file viewer that makes visually exploring NGS data intuitively. It uses multiple layers to simultaneously (or sequentially) view SAM/BAM related features like coverage or allele frequency, or ChIP-SEQ features like polarity from as many files as you like. The paging-friendly binary file layout makes it feasible to browse data sets far larger than the system's available RAM.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "sneakysnake": {
        "Name": "SneakySnake",
        "Description": "A Fast and Accurate Universal Genome Pre-Alignment Filter for CPUs, GPUs, and FPGAs.\n\nThe first and the only pre-alignment filtering algorithm that works efficiently and fast on modern CPU, FPGA, and GPU architectures. SneakySnake greatly (by more than two orders of magnitude) expedites sequence alignment calculation for both short (Illumina) and long (ONT and PacBio) reads.",
        "GPU": true,
        "CPU": true,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "soap3-gpu": {
        "Name": "SOAP3",
        "Description": "SOAP3 is a GPU-based software for aligning short reads to a reference sequence.",
        "GPU": true,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "clustersheep": {
        "Name": "ClusterSheep",
        "Description": "ClusterSheep is a GPU/CUDA-accelerated software tool for large-scale clustering of tandem mass spectra from shotgun proteomics.",
        "GPU": true,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "cmsa": {
        "Name": "CMSA",
        "Description": "A heterogeneous CPU/GPU computing system for multiple similar RNA/DNA sequence alignment.",
        "GPU": true,
        "CPU": true,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "Treerecs": {
        "Name": "Treerecs",
        "Description": "Treerecs is an open-source (species- and gene-) tree reconciliation software distributed under the GNU AGPL licence.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "comer2": {
        "Name": "COMER2",
        "Description": "GPU-accelerated sensitive and specific homology searches.\n\nCOMER2, cross-platform software for protein remote homology search.\n\nThe COMER method based on sequence profile-profile comparison is one of the most sensitive and accurate computational tools developed for protein alignment and homology search. COMER version 2.1 (COMER2) represents one of the fastest implementations of calculations for sensitive protein homology search. High COMER2 performance is achieved by harnessing the power of the Graphics processing unit (GPU). Hence, a GPU is expected to be installed on the system.\n\nCOMER2, a cross-platform software package for protein remote homology search and alignment.",
        "GPU": true,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "gpu-cassert": {
        "Name": "GPU-CASSERT",
        "Description": "The GPU-based implementation of the CASSERT algorithm for protein 3D structure similarity searching. The algorithm is based on the two-phase alignment of protein structures when matching fragments of compared proteins.",
        "GPU": true,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "medicc2": {
        "Name": "MEDICC2",
        "Description": "Whole-genome doubling-aware copy number phylogenies for cancer evolution with MEDICC2. Chromosomal instability (CIN) and somatic copy number alterations (SCNA) play a key role in the evolutionary process that shapes cancer genomes. SCNAs comprise many classes of clinically relevant events, such as localised amplifications, gains, losses, loss-of-heterozygosity (LOH) events, and recently discovered parallel evolutionary events revealed by multi-sample phasing. These events frequently appear jointly with whole genome doubling (WGD), a transformative event in tumour evolution, which generates tetraploid or near-tetraploid cells. WGD events are often clonal, occuring before the emergence of the most recent common ancestor, and have been associated with increased CIN, poor patient outcome and are currently being investigated as potential therapeutic targets",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "snapMRF": {
        "Name": "snapMRF",
        "Description": "GPU-accelerated magnetic resonance fingerprinting dictionary generation and matching using extended phase graphs.",
        "GPU": true,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "croco-xlink": {
        "Name": "CroCo",
        "Description": "A a user-centred tool to convert results from crosslinking mass spectrometry experiments | Convert data formats from chemical cross-linking mass spectrometry (XL-MS) | The CroCo cross-link converter \u2014 CroCo documentation | CroCo converts multiple data format from cross-linking mass spectrometry software tools to xTable format (in csv format) | The CroCo cross-link converter \u00b6 | CroCo converts multiple data format from cross-linking mass spectrometry software tools to xTable format (in csv format). It is distributed as graphical programme to be run from an executable and as a Python module to be integrated into workflows",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "cuda-meme": {
        "Name": "CUDA-MEME",
        "Description": "Motif discovery software based on MEME algorithm for a single GPU device using CUDA programming model. At present, it only supports the OOPS and ZOOPS models.",
        "GPU": true,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "cudammc": {
        "Name": "cudaMMC",
        "Description": "GPU-enhanced multiscale Monte Carlo chromatin 3d modelling.",
        "GPU": true,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "mkesa": {
        "Name": "mkESA",
        "Description": "Open source program for constructing enhanced suffix arrays (ESAs) from biological sequence data. The program is based on our implementation of Manzini's lightweight Deep-Shallow algorithm [1], which can also utilize multiple CPUs/cores for some extra speed-up. The generated output is compatible with the output of mkvtree from the Vmatch package written by Stefan Kurtz.",
        "GPU": false,
        "CPU": true,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "d-ee": {
        "Name": "D-EE",
        "Description": "D-EE is a distributed dimensionality reduction and visualization tool. Its distributed storage and distributed computation technique allow us to efficiently analyze large-scale single-cell data at the cost of constant time speedup.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": true
    },
    "MRUniNovo": {
        "Name": "MRUniNovo",
        "Description": "Tool for de novo peptide sequencing utilizing the hadoop distributed computing framework.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": true
    },
    "perceptron": {
        "Name": "PERCEPTRON",
        "Description": "PERCEPTRON is an open-source GPU-accelerated proteoform identification pipeline for top-down proteomics. PERCEPTRON is a freely available web-based proteoform identification pipeline for Top-Down Proteomics (TDP).",
        "GPU": true,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "maude": {
        "Name": "MAUDE",
        "Description": "Inferring expression changes in sorting-based CRISPR screens.\n\nMAUDE: Mean Alterations Using Discrete Expression.\n\nMAUDE is an R package for finding differences in means of normally distributed (or nearly so) data, via measuring abundances in discrete bins.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "petal": {
        "Name": "PETAL",
        "Description": "PETAL (ParallEl paThways AnaLyzer): a python tool for deep analysis of biological pathways.\n\n\nPETAL software is written in the Python 3 programming language. It contains a set of tools for pathway analysis and discovery of novel therapeutic targets. The approach allows you to scan and perform a in-depth search of the biological pathway to analyze less recurrent pathways, detect nodes that are far from the initial target nodes and showing the pathway of origin from which it was taken the gene.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "deepRAM": {
        "Name": "deepRAM",
        "Description": "Comprehensive evaluation of deep learning architectures for prediction of DNA/RNA sequence binding specificities | End-to-end deep learning toolkit for predicting protein binding sites and motifs | deepRAM is an end-to-end deep learning toolkit for predicting protein binding sites and motifs. It helps users run experiments using many state-of-the-art deep learning methods and addresses the challenge of selecting model parameters in deep learning models using a fully automatic model selection strategy. This helps avoid hand-tuning and thus removes any bias in running experiments, making it user friendly without losing its flexibility. While it was designed with ChIP-seq and CLIP-seq data in mind, it can be used for any DNA/RNA sequence binary classification problem",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "deeptrio": {
        "Name": "DeepTrio",
        "Description": "A ternary prediction system for protein-protein interaction using mask multiple parallel convolutional neural networks.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "node2loc": {
        "Name": "node2loc",
        "Description": "Predicting protein subcellular location using learned distributed representations from a protein-protein network | Predicting protein subcellular location using node embedding | we present a deep learning based method, node2loc, to predict protein subcellular location. node2loc first learns distributed representations of proteins in a protein-protein network, which acquires representations from unlabeled data for downstream tasks. Then the learned representations are further fed into a recurrent neural network (RNN) to predict subcellular locations | To identify the functions of a protein, we first need know where this protein is located. Interacting proteins tend to locate in the same subcellular location. Thus, it is imperative to take the protein-protein interactions into account for computational identification of protein subcellular locations",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "DRAMP": {
        "Name": "DRAMP",
        "Description": "updated data repository of antimicrobial peptides | Browse, Create and Mining Antimicrobial Peptides | 157 new entries are added to in DRAMP. 33 entries are natural AMPs including 31 animal AMPs and 2 plant AMPs. 124 entries are synthetic AMPs | A brief introduction to DRAMP database | DRAMP database is an information portal to biological active peptides. Peptides in this database come from three sources : Public databases (Swiss-Prot, PDB, PubMed), Clinical antimicrobial peptides (preclinical and clinical) and Patents | DRAMP(Data repository of antimicrobial peptides) is an open-access and manually curated database harboring diverse annotations of AMPs including sequences, structures, activities, physicochemical, patent, clinical and reference information | We are responsible for maintaining the website daily and updating the database regularly",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "g-blastn": {
        "Name": "G-BLASTN",
        "Description": "GPU-accelerated nucleotide alignment tool based on the widely used NCBI-BLAST.",
        "GPU": true,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "h-blast": {
        "Name": "H-BLAST",
        "Description": "Fast protein sequence alignment toolkit on heterogeneous computers with GPUs .",
        "GPU": true,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "mica-aligner": {
        "Name": "MICA-aligner",
        "Description": "New short-read aligner that is optimized in view of MIC\u2019s limitation and the extra parallelism inside each MIC core.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "mummergpu": {
        "Name": "MUMmerGPU",
        "Description": "MUMmerGPU is a low cost, ultra-fast sequence alignment program designed to handle the increasing volume of data produced by HTS.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "mutationTCN": {
        "Name": "mutationTCN",
        "Description": "Prediction of Mutation Effects using a Deep Temporal Convolutional Network.\n\nThis is the code for the paper Prediction of Mutation Effects using a Deep Temporal Convolutional Network. https://academic.oup.com/bioinformatics/advance-article/doi/10.1093/bioinformatics/btz873/5634146.\n\nThe code is compatible with tensorflow-gpu=1.10.0 and python=2.7",
        "GPU": true,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "seal": {
        "Name": "SEAL",
        "Description": "Seal is a suite of distributed applications for aligning short DNA reads, manipulating and analyzing short read alignments. It is generally run on the Hadoop framework, which makes it particularly well suited for processing large data sets.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": true
    },
    "Gene2vec": {
        "Name": "Gene2vec",
        "Description": "Machine learning method that utilizes transcriptome-wide gene co-expression to generate a distributed representation of genes.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "gpumotif": {
        "Name": "GPUmotif",
        "Description": "GPU-accelerated ultra-fast and energy-efficient motif analysis program.",
        "GPU": true,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "GRAM": {
        "Name": "GRAM",
        "Description": "A GeneRAlized Model to predict the molecular effect of a non-coding variant in a cell-type specific manner | GRAM: A GeneRAlized Model to predict the molecular effect of a non-coding variant in a cell type-specific manner",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "RAMPAGE": {
        "Name": "RAMPAGE",
        "Description": "> VERY_LOW CONFIDENCE! | > CORRECT NAME OF TOOL COULD ALSO BE 'Alu', 'III-transcribed', 'Pol III-transcribed', 'III-transcribed Alu' | Genome-wide analysis of polymerase III-transcribed Alu elements suggests cell-type-specific enhancer function | Pipeline to identify expressed Alu elements using RAMPAGE | A schematic flow shows the pipeline",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "normirazor": {
        "Name": "NormiRazor",
        "Description": "Tool applying GPU-accelerated computing for determination of internal references in microRNA transcription studies.\n\nGitLab is a single application for the entire software development lifecycle. From project planning and source code management to CI/CD, monitoring, and security.",
        "GPU": true,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "scigans": {
        "Name": "scIGANs",
        "Description": "single-cell RNA-seq imputation using generative adversarial networks.\n\nGenerative adversarial networks for single-cell RNA-seq imputation.\n\nThe data and codes for reproducing all Figures and Tables in the manuscript of scIGANs.\n\nscIGANs is a computational tool for single-cell RNA-seq imputation and denoise using Generative Adversarial Networks (GANs). Build on PyTorch, scIGNAs enables GPU acceleration inaddition to CPU computing as long as the GPUs are available.",
        "GPU": true,
        "CPU": true,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "hpg-dhunter": {
        "Name": "HPG-DHunter",
        "Description": "An ultrafast, friendly tool for DMR detection and visualization.\n\nIf you want to use this tool just now, there is an executable file for Linux x86_64 systems. This compressed file is available at releases page. But, previously, CUDA and Nvidia drivers must be installed in your system. For that, you can go to System requirements section.\n\nHPG-Dhunter is an interactive tool for detecting Differentially Methylathed Regions (DMRs) and visualizing DNA methylation signals. It is based on building a methylation signal from the information yielded by HPG-HMapper, and using a NVidia GPU and the CUDA programming model to compute the Discrete Wavelet Transform (DWT) of this methylation signal. The transformation of the signals in turn allows the comparison of different signals at low resolution levels, easily identifying DMRs with a low workload, when compared to other strategies. HPG-Dhunter is part of the HPG-MSuite.",
        "GPU": true,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "iblp": {
        "Name": "iBLP",
        "Description": "An XGBoost-Based Predictor for Identifying Bioluminescent Proteins.\n\nThe role of this page is a brief introduction to iBLP.\n\n\nBioluminescent proteins are a class of proteins that widely distributed in many living organisms with various mechanisms of light emission including bioluminescence and chemiluminescence from luminous organisms.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "imagehts": {
        "Name": "imageHTS",
        "Description": "R package dedicated to the analysis of high-throughput microscopy-based screens. The package provides a modular and extensible framework to segment cells, extract quantitative cell features, predict cell types and browse screen data through web interfaces. Designed to operate in distributed environments, it provides a standardized access to remote data and facilitates the dissemination of high-throughput microscopy-based datasets.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": true
    },
    "isac": {
        "Name": "ISAC",
        "Description": "Accelerated 2D Classification With ISAC Using GPUs.",
        "GPU": true,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "NMF-RI": {
        "Name": "NMF-RI",
        "Description": "Blind spectral unmixing of highly mixed multispectral flow and image cytometry data.\n\nMatlab code to spectrally unmix highly mixed multispectral flow and image cytometry data.\n\nTo use NMF-RI on new data (tissue or flow cytometry) we recommend to use the \u00b4main.m\u00b4 code distributed and load new cytometry data to the existing folder hierarchy.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": true
    },
    "quest": {
        "Name": "QuEST",
        "Description": "Kernel Density Estimator-based package for analysis of massively parallel sequencing data from chromatin immunoprecipitations (ChIP-seq or ChIPseq).",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "SigUNet": {
        "Name": "SigUNet",
        "Description": "signal peptide recognition based on semantic segmentation.\n\nA signal peptide predictor based on deep learning.\n\nFor CPU: pip3 install -r requirement.cpu.txt.\n\nFor GPU (suggest): pip3 install -r requirement.gpu.txt",
        "GPU": true,
        "CPU": true,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "uni_dock": {
        "Name": "Uni-Dock",
        "Description": "GPU-accelerated docking.",
        "GPU": true,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "rKIN": {
        "Name": "rKIN",
        "Description": "Kernel-based method for estimating isotopic niche size and overlap.\n\nThe isotopic niche of consumers represents biologically relevant information on resource and habitat use. Several tools have been developed to quantify niche size and overlap. Nonetheless, methods adapted by spatial ecologists to quantify animal home ranges can be modified for use in stable isotope ecology when data are not normally distributed in bivariate space. We offer a tool that draws on existing spatial metrics, such as Minimum Convex Polygon (MCP) and Standard Ellipse Area (SEA), and add novel metrics using Kernel Utilization Density (KUD) estimators to measure isotopic niche size and overlap. We present examples using empirical and simulated data to demonstrate the performance of the package Kernel Isotopic Niches in R (rKIN) under various scenarios.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "simcov": {
        "Name": "SIMCoV",
        "Description": "Spatially distributed infection increases viral load in a computational model of SARS-CoV-2 lung infection.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "scg": {
        "Name": "Single Cell Genotyper (SCG)",
        "Description": "A new statistical model and machine learning inference algorithm designed to determine the pattern of how DNA mutations are distributed in individual cells of a tumour. The software provides implementation of several probabilistic models for clustering single cell (nucleus) data and inferring clonal genotypes.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": false
    },
    "stpeter": {
        "Name": "StPeter",
        "Description": "A tool for analyzing proteomics data acquired by mass spectrometry. Quantifies proteins from shotgun MS/MS data using normalized spectral count or normalized spectral index techniques. Incorporates distributed techniques to account for peptide sequence degeneracy.",
        "GPU": false,
        "CPU": false,
        "RAM": false,
        "parallel": false,
        "distributed": true
    }
}